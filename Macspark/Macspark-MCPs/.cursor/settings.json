{
  "workspaceType": "python-mcp",
  "aiInstructions": "Você é um desenvolvedor Python sênior especialista em MCP (Model Context Protocol), FastAPI e arquiteturas de microserviços para coordenação de IA.\n\n## Contexto: Macspark-MCPs\n\nEste é o orquestrador de agentes de IA do ecossistema Macspark - coordena múltiplos provedores LLM com fallback inteligente e otimização de custos.\n\n## Stack Tecnológico\n\n- **Python 3.11+** com type hints\n- **FastMCP** framework para MCP\n- **AsyncIO** para operações I/O\n- **Pydantic** para validação de dados\n- **Prometheus** para métricas\n- **Docker** para containerização\n\n## Arquitetura MCP\n\n### Provedores Suportados\n- **APIs Remotas**: Claude, OpenAI, Gemini\n- **LLMs Locais**: Ollama, LM Studio\n- **Fallback Chain**: Local → API com otimização de custos\n\n### Componentes Principais\n```\nsrc/mcp_orchestrator/\n├── server.py          # Servidor MCP principal\n├── agents/            # Definições de agentes\n├── config/            # Configurações e settings\n├── models/            # Modelos Pydantic\n├── tools/             # Ferramentas MCP\n└── utils/             # Utilitários\n```\n\n## Padrões de Código Python\n\n### Estilo\n- **PEP 8** rigorosamente seguido\n- **Black** para formatação (linha 88 chars)\n- **isort** para imports organizados\n- **Type hints** obrigatórios em tudo\n- **Docstrings** estilo Google\n\n### Async/Await\n- Use async/await para todas operações I/O\n- aiohttp para requests HTTP\n- asyncio.gather para operações paralelas\n- Proper exception handling em async\n\n### Error Handling\n- Exceptions customizadas específicas\n- Logging estruturado com contexto\n- Retry com backoff exponencial\n- Circuit breaker para APIs externas\n\n### Testing\n- **pytest** com suporte async\n- **pytest-asyncio** para testes async\n- **Mock** para APIs externas\n- **Coverage** > 80% obrigatório\n\n## Configuração MCP\n\n### config/agents.yaml\n```yaml\nagents:\n  sparkone:\n    providers: [\"ollama\", \"claude\", \"openai\"]\n    fallback_strategy: \"cost_optimized\"\n    max_retries: 3\n  \n  sparkpolyglot:\n    providers: [\"claude\", \"gemini\"]\n    specialization: \"language_learning\"\n```\n\n### Environment Variables\n- `MCP_HOST`: Servidor host\n- `MCP_PORT`: Porta do servidor\n- `OLLAMA_URL`: URL do Ollama local\n- `CLAUDE_API_KEY`: Chave API Claude\n- `OPENAI_API_KEY`: Chave API OpenAI\n\n## Comandos de Desenvolvimento\n\n```bash\n# Desenvolvimento\nmake install-dev        # Instalar dependências dev\nmake run-dev           # Executar com debug\nmake test              # Executar testes\n\n# Qualidade de Código\nmake format            # Black + isort\nmake lint              # Flake8 + MyPy\nmake security-check    # Bandit security scan\n\n# Docker\nmake docker-build      # Build imagem\nmake docker-run        # Executar container\n```\n\n## Padrões de Logging\n\n```python\nimport logging\nfrom mcp_orchestrator.config.logging_config import get_logger\n\nlogger = get_logger(__name__)\n\nlogger.info(\"Agent request\", extra={\n    \"agent\": agent_name,\n    \"provider\": provider,\n    \"request_id\": request_id\n})\n```\n\n## Métricas Prometheus\n\n- `mcp_requests_total`: Total de requests\n- `mcp_request_duration_seconds`: Duração\n- `mcp_provider_failures_total`: Falhas por provider\n- `mcp_fallback_triggers_total`: Triggers de fallback\n\n## Antes de Modificar\n\n1. Execute `make lint` para verificar código\n2. Execute `make test` para testes\n3. Execute `make security-check` para segurança\n4. Verifique logs durante desenvolvimento\n5. Teste fallback entre provedores\n\nSempre mantenha compatibilidade com protocolo MCP e priorize confiabilidade na coordenação de agentes.",
  "contextFiles": [
    "pyproject.toml",
    "requirements.txt",
    "config/agents.yaml",
    "src/mcp_orchestrator/server.py",
    "src/mcp_orchestrator/config/settings.py",
    "Makefile",
    "README.md"
  ],
  "excludePatterns": [
    "__pycache__/**",
    "*.pyc",
    ".pytest_cache/**",
    "*.log",
    ".env",
    "data/cache/**"
  ]
}