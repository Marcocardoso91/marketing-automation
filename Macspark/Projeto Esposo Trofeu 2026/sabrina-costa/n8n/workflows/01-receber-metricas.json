{
  "name": "Sabrina_01_ProcessarMetricas",
  "active": false,
  "id": "sabrina-01-processar-metricas",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sabrina/metricas",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true,
          "allowUnauthorizedCerts": false
        }
      },
      "name": "Webhook - Receber Métricas",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        300
      ],
      "webhookId": "sabrina-metricas"
    },
    {
      "parameters": {
        "functionCode": "const headers = $json.headers || {};\nconst rawBody = $json.body || $json;\nconst contentType = (headers['content-type'] || headers['Content-Type'] || '').toLowerCase();\n\nif (contentType.includes('text/csv') || typeof rawBody === 'string') {\n  return [{ json: { format: 'csv', payload: rawBody } }];\n}\n\nreturn [{ json: { format: 'json', payload: rawBody } }];"
      },
      "name": "Detectar Formato",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        300
      ]
    },
    {
      "parameters": {
        "value1": "={{$json[\"format\"]}}",
        "rules": [
          {
            "value2": "csv"
          },
          {
            "value2": "json"
          }
        ]
      },
      "name": "Selecionar Formato",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        640,
        300
      ]
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "const Papa = require('papaparse');\nconst csvData = $json.payload;\n\nconst parsed = Papa.parse(csvData, {\n  header: true,\n  skipEmptyLines: true,\n  dynamicTyping: true\n});\n\nif (parsed.errors.length > 0) {\n  throw new Error('Erro ao processar CSV: ' + JSON.stringify(parsed.errors));\n}\n\nreturn parsed.data.map(row => ({ json: row }));"
      },
      "name": "Parse CSV",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "const payload = $json.payload;\n\nif (Array.isArray(payload)) {\n  return payload.map(item => ({ json: item }));\n}\n\nif (typeof payload === 'object' && payload) {\n  return [{ json: payload }];\n}\n\nthrow new Error('Formato JSON inválido');"
      },
      "name": "Validar JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        420
      ]
    },
    {
      "parameters": {
        "mode": "append"
      },
      "name": "Merge Streams",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const item = { ...$json };\n\nconst required = ['date', 'ctr', 'cpc', 'cost'];\nrequired.forEach((field) => {\n  if (item[field] === undefined || item[field] === null || item[field] === '') {\n    throw new Error(`Campo obrigatório faltando: ${field}`);\n  }\n});\n\nconst ctr = Number(item.ctr);\nif (Number.isNaN(ctr) || ctr < 0 || ctr > 100) {\n  throw new Error('CTR deve estar entre 0 e 100');\n}\n\nconst date = new Date(item.date);\nif (Number.isNaN(date.getTime())) {\n  throw new Error('Data inválida');\n}\nif (date > new Date()) {\n  throw new Error('Data não pode ser futura');\n}\n\nreturn [{ json: item }];"
      },
      "name": "Validar Campos",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const metric = { ...$json };\n\nif (metric.newFollowers && metric.newFollowers > 0 && metric.cost !== undefined) {\n  metric.costPerFollower = Number(metric.cost / metric.newFollowers).toFixed(2);\n} else {\n  metric.costPerFollower = null;\n}\n\nif (!metric.clicks && metric.impressions && metric.ctr) {\n  metric.clicks = Math.round(Number(metric.impressions) * (Number(metric.ctr) / 100));\n}\n\nmetric.date = new Date(metric.date).toISOString().split('T')[0];\n\nreturn [{ json: metric }];"
      },
      "name": "Calcular Derivados",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/api/webhook/metrics",
        "options": {},
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Webhook-Token",
              "value": "={{$env.WEBHOOK_SECRET}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={{$json}}",
        "sendBody": true,
        "method": "POST"
      },
      "name": "POST - Salvar Métricas",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const metric = { ...$json };\nconst thresholds = {\n  ctrMin: Number($env.CTR_MIN || 1.5),\n  cpcMax: Number($env.CPC_MAX || 0.7),\n  cpmMax: Number($env.CPM_MAX || 10),\n  frequencyMax: Number($env.FREQUENCY_MAX || 3),\n  costPerFollowerMax: Number($env.COST_PER_FOLLOWER_MAX || 1.3)\n};\n\nconst alerts = [];\n\nif (metric.ctr !== null && metric.ctr < thresholds.ctrMin) {\n  alerts.push({\n    type: 'ctr_low',\n    message: `⚠️ CTR abaixo da meta (${metric.ctr}% < ${thresholds.ctrMin}%)`,\n    metadata: { date: metric.date, value: metric.ctr, threshold: thresholds.ctrMin }\n  });\n}\n\nif (metric.cpc !== null && metric.cpc > thresholds.cpcMax) {\n  alerts.push({\n    type: 'cpc_high',\n    message: `⚠️ CPC acima da meta (R$${metric.cpc} > R$${thresholds.cpcMax})`,\n    metadata: { date: metric.date, value: metric.cpc, threshold: thresholds.cpcMax }\n  });\n}\n\nif (metric.cpm !== null && metric.cpm > thresholds.cpmMax) {\n  alerts.push({\n    type: 'cpm_high',\n    message: `⚠️ CPM acima da meta (R$${metric.cpm} > R$${thresholds.cpmMax})`,\n    metadata: { date: metric.date, value: metric.cpm, threshold: thresholds.cpmMax }\n  });\n}\n\nif (metric.frequency !== null && metric.frequency > thresholds.frequencyMax) {\n  alerts.push({\n    type: 'frequency_high',\n    message: `⚠️ Frequência alta (${metric.frequency} > ${thresholds.frequencyMax})`,\n    metadata: { date: metric.date, value: metric.frequency, threshold: thresholds.frequencyMax }\n  });\n}\n\nif (metric.costPerFollower && Number(metric.costPerFollower) > thresholds.costPerFollowerMax) {\n  alerts.push({\n    type: 'cost_per_follower_high',\n    message: `⚠️ Custo por seguidor alto (R$${metric.costPerFollower} > R$${thresholds.costPerFollowerMax})`,\n    metadata: { date: metric.date, value: metric.costPerFollower, threshold: thresholds.costPerFollowerMax }\n  });\n}\n\nreturn [{ json: { metric, alerts, hasAlerts: alerts.length > 0 } }];"
      },
      "name": "Verificar Thresholds",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.hasAlerts}}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "name": "Tem Alertas?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2220,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$env.EVOLUTION_API_URL}}/message/sendText/{{$env.WHATSAPP_INSTANCE}}",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.EVOLUTION_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={\n  \"number\": \"{{$env.WHATSAPP_NUMBER}}\",\n  \"text\": $json.alerts.map(alert => alert.message).join('\\n\\n')\n}",
        "sendBody": true
      },
      "name": "Enviar Alertas WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2440,
        180
      ]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/api/alerts",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Webhook-Token",
              "value": "={{$env.WEBHOOK_SECRET}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={{$json.alerts}}",
        "sendBody": true
      },
      "name": "Salvar Alertas",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2660,
        180
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Métrica processada\",\n  \"alertsGenerated\": {{$json.alerts ? $json.alerts.length : 0}}\n}",
        "responseCode": 200
      },
      "name": "Responder Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2660,
        360
      ]
    }
  ],
  "connections": {
    "Webhook - Receber Métricas": {
      "main": [
        [
          {
            "node": "Detectar Formato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detectar Formato": {
      "main": [
        [
          {
            "node": "Selecionar Formato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Selecionar Formato": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validar JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Merge Streams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar JSON": {
      "main": [
        [
          {
            "node": "Merge Streams",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Streams": {
      "main": [
        [
          {
            "node": "Validar Campos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Campos": {
      "main": [
        [
          {
            "node": "Calcular Derivados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular Derivados": {
      "main": [
        [
          {
            "node": "POST - Salvar Métricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST - Salvar Métricas": {
      "main": [
        [
          {
            "node": "Verificar Thresholds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Thresholds": {
      "main": [
        [
          {
            "node": "Tem Alertas?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tem Alertas?": {
      "main": [
        [
          {
            "node": "Responder Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar Alertas WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Alertas WhatsApp": {
      "main": [
        [
          {
            "node": "Salvar Alertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Alertas": {
      "main": [
        [
          {
            "node": "Responder Webhook",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "regular",
    "saveManualExecutions": true
  },
  "meta": {
    "template": "docs/N8N-WORKFLOWS.md#workflow-1-processar-métricas"
  },
  "tags": [
    "Sabrina",
    "Metrics"
  ]
}
