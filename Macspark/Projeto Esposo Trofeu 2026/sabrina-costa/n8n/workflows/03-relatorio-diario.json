{
  "name": "Sabrina_03_RelatorioDiario",
  "active": false,
  "id": "sabrina-03-relatorio-diario",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 18,
              "minute": 5
            }
          ]
        }
      },
      "name": "Cron - 18h05 Diariamente",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        320
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{$env.API_BASE_URL}}/api/metrics?date={{$now.format('YYYY-MM-DD')}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN || ''}}"
            },
            {
              "name": "X-Webhook-Token",
              "value": "={{$env.WEBHOOK_SECRET}}"
            }
          ]
        }
      },
      "name": "GET Hoje",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        440,
        260
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{$env.API_BASE_URL}}/api/metrics?date={{$now.add(-1,'day').format('YYYY-MM-DD')}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN || ''}}"
            },
            {
              "name": "X-Webhook-Token",
              "value": "={{$env.WEBHOOK_SECRET}}"
            }
          ]
        }
      },
      "name": "GET Ontem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        440,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "const hoje = $items('GET Hoje', 0, 0)[0].json.data?.[0];\nconst ontem = $items('GET Ontem', 0, 0)[0].json.data?.[0];\n\nif (!hoje) {\n  return [{ json: { hasData: false, message: 'Nenhuma m√©trica encontrada para hoje.' } }];\n}\n\nconst compare = (field) => {\n  if (!ontem || ontem[field] === undefined || ontem[field] === null) return { diff: 0, percent: 0 };\n  const todayValue = Number(hoje[field] || 0);\n  const yValue = Number(ontem[field] || 0);\n  if (yValue === 0) {\n    return { diff: todayValue, percent: todayValue > 0 ? 100 : 0 };\n  }\n  const diff = todayValue - yValue;\n  const percent = ((diff / yValue) * 100).toFixed(1);\n  return { diff, percent };\n};\n\nreturn [{\n  json: {\n    hasData: true,\n    date: hoje.date,\n    metrics: hoje,\n    comparisons: {\n      ctr: compare('ctr'),\n      cpc: compare('cpc'),\n      newFollowers: compare('new_followers'),\n      cost: compare('cost'),\n      impressions: compare('impressions')\n    }\n  }\n}];"
      },
      "name": "Calcular Compara√ß√µes",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        660,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "if (!$json.hasData) {\n  return [{ json: $json }];\n}\n\nconst { metrics, comparisons } = $json;\nconst date = new Date($json.date).toLocaleDateString('pt-BR');\n\nconst status = metrics.ctr >= 1.5 && metrics.cpc <= 0.7 ? '‚úÖ Bom' : metrics.ctr >= 1.2 ? '‚ö†Ô∏è Aten√ß√£o' : '‚ùå Cr√≠tico';\n\nconst message = `üìä *RELAT√ìRIO DI√ÅRIO*\\nData: ${date}\\n\\n‚úÖ *M√âTRICAS PRINCIPAIS*\\n‚Ä¢ Alcance: ${metrics.impressions || 'N/A'}\\n‚Ä¢ CTR: ${metrics.ctr}% (${comparisons.ctr.percent}% vs ontem)\\n‚Ä¢ CPC: R$${metrics.cpc} (${comparisons.cpc.percent}% vs ontem)\\n‚Ä¢ CPM: R$${metrics.cpm || 'N/A'}\\n‚Ä¢ Frequ√™ncia: ${metrics.frequency || 'N/A'}\\n‚Ä¢ Novos seguidores: ${metrics.new_followers || 'N/A'} (${comparisons.newFollowers.diff >= 0 ? '+' : ''}${comparisons.newFollowers.diff})\\n‚Ä¢ Investimento: R$${metrics.cost} (${comparisons.cost.percent}% vs ontem)\\n\\nüéØ *Status geral:* ${status}\\n\\nüí° *Recomenda√ß√µes do dia*\\n‚Ä¢ Revisar criativo de maior gasto\\n‚Ä¢ Monitorar coment√°rios das pr√≥ximas 2h\\n\\nüîó Dashboard: ${$env.DASHBOARD_URL || 'https://dashboard-sabrina.vercel.app'}`;\n\nreturn [{ json: { ...$json, message } }];"
      },
      "name": "Formatar Relat√≥rio",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.EVOLUTION_API_URL}}/message/sendText/{{$env.WHATSAPP_INSTANCE}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.EVOLUTION_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={\n  \"number\": \"{{$env.WHATSAPP_NUMBER}}\",\n  \"text\": $json.message || 'Sem m√©tricas registradas hoje.'\n}",
        "sendBody": true,
        "options": {
          "timeout": 10000
        }
      },
      "name": "Enviar WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1100,
        320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.API_BASE_URL}}/api/alerts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Webhook-Token",
              "value": "={{$env.WEBHOOK_SECRET}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={\n  \"type\": \"daily_report\",\n  \"message\": \"Relat√≥rio di√°rio enviado\",\n  \"metadata\": {\n    \"date\": $json.date,\n    \"status\": $json.message ? 'sent' : 'no-data'\n  }\n}",
        "sendBody": true
      },
      "name": "Registrar Evento",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1320,
        320
      ]
    }
  ],
  "connections": {
    "Cron - 18h05 Diariamente": {
      "main": [
        [
          {
            "node": "GET Hoje",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GET Ontem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Hoje": {
      "main": [
        [
          {
            "node": "Calcular Compara√ß√µes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Ontem": {
      "main": [
        [
          {
            "node": "Calcular Compara√ß√µes",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Calcular Compara√ß√µes": {
      "main": [
        [
          {
            "node": "Formatar Relat√≥rio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Relat√≥rio": {
      "main": [
        [
          {
            "node": "Enviar WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar WhatsApp": {
      "main": [
        [
          {
            "node": "Registrar Evento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "regular"
  },
  "meta": {
    "template": "docs/N8N-WORKFLOWS.md#workflow-3-relat√≥rio-di√°rio"
  },
  "tags": [
    "Sabrina",
    "Relatorio"
  ]
}
