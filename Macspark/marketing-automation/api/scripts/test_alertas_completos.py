#!/usr/bin/env python3
"""
Script para testar todas as integra√ß√µes de alertas
WhatsApp, Slack, Email e Notion
"""
from src.utils.logger import setup_logger
from src.integrations.notion_client import get_notion_client
from src.integrations.n8n_client import get_n8n_client
import asyncio
import os
import sys
from pathlib import Path

# Adicionar src ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


logger = setup_logger(__name__)


async def test_whatsapp():
    """Testar integra√ß√£o WhatsApp"""
    print("[TESTE] Testando WhatsApp...")

    try:
        n8n = get_n8n_client()
        whatsapp_phone = os.getenv("WHATSAPP_ALERT_PHONE")

        if not whatsapp_phone:
            print("[ERRO] WHATSAPP_ALERT_PHONE n√£o configurado no .env")
            return False

        result = await n8n.trigger_workflow("whatsapp-evolution", {
            "phone": whatsapp_phone,
            "message": """
üß™ *TESTE* - Facebook Ads AI Agent

Sistema de alertas funcionando!

‚úÖ WhatsApp: OK
‚è≥ Slack: Pendente
‚è≥ Email: Pendente  
‚è≥ Notion: Pendente

Teste realizado em: """ + str(asyncio.get_event_loop().time())
        })

        if result:
            print(f"‚úÖ WhatsApp enviado com sucesso para {whatsapp_phone}")
            return True
        else:
            print("‚ùå Falha ao enviar WhatsApp")
            return False

    except Exception as e:
        print(f"‚ùå Erro no teste WhatsApp: {e}")
        return False


async def test_notion():
    """Testar integra√ß√£o Notion"""
    print("üß™ Testando Notion...")

    try:
        notion_db_id = os.getenv("NOTION_DATABASE_ID")

        if not notion_db_id or notion_db_id == "abc123def456":
            print("‚ùå NOTION_DATABASE_ID n√£o configurado (ainda √© placeholder)")
            print("   Precisa criar database no Notion primeiro")
            return False

        notion = get_notion_client(notion_db_id)

        # Teste simples - salvar sugest√£o
        result = await notion.save_suggestion({
            'campaign_id': 'test-123',
            'campaign_name': 'Teste de Integra√ß√£o',
            'type': 'TEST',
            'reason': 'Teste do sistema de alertas',
            'data': {
                'ctr': 1.5,
                'cpa': 45.0,
                'spend': 100.0
            }
        })

        if result:
            print(f"‚úÖ Notion: P√°gina criada com sucesso")
            print(f"   URL: {result}")
            return True
        else:
            print("‚ùå Falha ao criar p√°gina no Notion")
            return False

    except Exception as e:
        print(f"‚ùå Erro no teste Notion: {e}")
        return False


async def test_n8n_connection():
    """Testar conex√£o com n8n"""
    print("üß™ Testando conex√£o n8n...")

    try:
        n8n = get_n8n_client()

        # Testar listagem de workflows
        workflows = await n8n.list_workflows()

        if workflows:
            print(f"‚úÖ n8n conectado: {len(workflows)} workflows encontrados")

            # Mostrar workflows ativos
            active_workflows = [w for w in workflows if w.get('active', False)]
            print(f"   Workflows ativos: {len(active_workflows)}")

            for wf in active_workflows[:3]:  # Mostrar apenas 3
                print(
                    f"   - {wf.get('name', 'Sem nome')} (ID: {wf.get('id', 'N/A')})")

            return True
        else:
            print("‚ùå Nenhum workflow encontrado no n8n")
            return False

    except Exception as e:
        print(f"‚ùå Erro na conex√£o n8n: {e}")
        return False


async def test_slack_config():
    """Verificar configura√ß√£o Slack"""
    print("üß™ Verificando configura√ß√£o Slack...")

    slack_url = os.getenv("SLACK_WEBHOOK_URL")

    if not slack_url or "XXX" in slack_url:
        print("‚ùå SLACK_WEBHOOK_URL n√£o configurado")
        print("   Precisa configurar webhook no Slack primeiro")
        return False
    else:
        print("‚úÖ SLACK_WEBHOOK_URL configurado")
        print("   (Teste real requer webhook v√°lido)")
        return True


def print_config_status():
    """Mostrar status das configura√ß√µes"""
    print("\n" + "="*60)
    print("üìã STATUS DAS CONFIGURA√á√ïES")
    print("="*60)

    configs = {
        "WHATSAPP_ALERT_PHONE": os.getenv("WHATSAPP_ALERT_PHONE"),
        "SLACK_WEBHOOK_URL": os.getenv("SLACK_WEBHOOK_URL"),
        "ADMIN_EMAIL": os.getenv("ADMIN_EMAIL"),
        "NOTION_API_TOKEN": os.getenv("NOTION_API_TOKEN"),
        "NOTION_DATABASE_ID": os.getenv("NOTION_DATABASE_ID"),
        "N8N_API_URL": os.getenv("N8N_API_URL"),
        "N8N_API_KEY": os.getenv("N8N_API_KEY")
    }

    for key, value in configs.items():
        if value:
            if "XXX" in str(value) or "abc123" in str(value):
                status = "‚ö†Ô∏è  PLACEHOLDER"
            else:
                status = "‚úÖ CONFIGURADO"
        else:
            status = "‚ùå FALTANDO"

        print(f"{status} {key}")


async def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE COMPLETO DE INTEGRA√á√ïES")
    print("Facebook Ads AI Agent - Sistema de Alertas")
    print("="*60)

    # Carregar .env se existir
    env_file = Path(".env")
    if env_file.exists():
        print("üìÅ Arquivo .env encontrado")
        # Carregar vari√°veis
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    else:
        print("‚ùå Arquivo .env n√£o encontrado")
        return

    print_config_status()

    print("\n" + "="*60)
    print("üß™ EXECUTANDO TESTES")
    print("="*60)

    # Executar testes
    results = {}

    results['n8n'] = await test_n8n_connection()
    results['whatsapp'] = await test_whatsapp()
    results['notion'] = await test_notion()
    results['slack'] = test_slack_config()

    # Resumo final
    print("\n" + "="*60)
    print("üìä RESUMO DOS TESTES")
    print("="*60)

    for test, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} {test.upper()}")

    passed = sum(results.values())
    total = len(results)

    print(f"\nüéØ RESULTADO: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ TODAS AS INTEGRA√á√ïES FUNCIONANDO!")
    elif passed >= 2:
        print("‚ö†Ô∏è  Algumas integra√ß√µes funcionando - verificar configura√ß√µes")
    else:
        print("‚ùå Muitas integra√ß√µes com problemas - verificar .env")

if __name__ == "__main__":
    asyncio.run(main())
