{
  "name": "Google Ads → Supabase - Métricas Diárias",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "15 9 * * *"
            }
          ]
        }
      },
      "name": "Schedule Trigger - Diário 9:15h",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "id": "schedule-gads-trigger"
    },
    {
      "parameters": {
        "resource": "campaign",
        "operation": "getAll",
        "customerId": "={{$env.GOOGLE_ADS_CUSTOMER_ID}}",
        "returnAll": true,
        "filters": {
          "dateRange": "YESTERDAY"
        },
        "fields": [
          "campaign.id",
          "campaign.name",
          "metrics.clicks",
          "metrics.impressions",
          "metrics.cost_micros",
          "metrics.ctr",
          "metrics.average_cpc",
          "metrics.conversions",
          "metrics.cost_per_conversion"
        ]
      },
      "name": "Google Ads - Buscar Campanhas",
      "type": "n8n-nodes-base.googleAds",
      "typeVersion": 1,
      "position": [450, 300],
      "id": "google-ads-node",
      "credentials": {
        "googleAdsOAuth2": "Google Ads"
      }
    },
    {
      "parameters": {
        "jsCode": "// Processar dados do Google Ads\nconst campaigns = items;\n\n// Agregar métricas de todas campanhas\nlet totalClicks = 0;\nlet totalImpressions = 0;\nlet totalCost = 0;\nlet totalConversions = 0;\n\nfor (const campaign of campaigns) {\n  const metrics = campaign.json.metrics || {};\n  \n  totalClicks += parseInt(metrics.clicks || 0);\n  totalImpressions += parseInt(metrics.impressions || 0);\n  totalCost += parseInt(metrics.cost_micros || 0) / 1000000; // micros to reais\n  totalConversions += parseFloat(metrics.conversions || 0);\n}\n\n// Calcular métricas derivadas\nconst avgCtr = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;\nconst avgCpc = totalClicks > 0 ? totalCost / totalClicks : 0;\nconst costPerConversion = totalConversions > 0 ? totalCost / totalConversions : 0;\nconst cpm = totalImpressions > 0 ? (totalCost / totalImpressions) * 1000 : 0;\n\n// Data de ontem\nconst yesterday = new Date();\nyesterday.setDate(yesterday.getDate() - 1);\nconst dataFormatted = yesterday.toISOString().split('T')[0];\n\nreturn [{\n  json: {\n    data: dataFormatted,\n    source: 'google_ads',\n    \n    // Métricas financeiras\n    spend: parseFloat(totalCost.toFixed(2)),\n    budget: 0, // Preencher manualmente ou via API\n    \n    // Métricas de alcance\n    reach: 0, // Google Ads não fornece reach diretamente\n    impressions: totalImpressions,\n    frequency: 0,\n    \n    // Métricas de engajamento\n    clicks: totalClicks,\n    ctr: parseFloat(avgCtr.toFixed(2)),\n    cpc: parseFloat(avgCpc.toFixed(2)),\n    cpe: 0,\n    cpm: parseFloat(cpm.toFixed(2)),\n    \n    // Métricas de conversão\n    conversions: Math.round(totalConversions),\n    cost_per_conversion: parseFloat(costPerConversion.toFixed(2)),\n    new_followers: 0,\n    cost_per_follower: 0,\n    \n    // Metadata\n    notes: `Google Ads: ${campaigns.length} campanhas, ${totalClicks} cliques, ${totalImpressions} impressões`,\n    raw_data: campaigns.map(c => c.json)\n  }\n}];"
      },
      "name": "Process Google Ads Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300],
      "id": "code-process-gads"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/daily_metrics",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.SUPABASE_ANON_KEY}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer ={{$env.SUPABASE_SERVICE_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "name": "Supabase - Insert Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 300],
      "id": "supabase-insert-gads"
    },
    {
      "parameters": {},
      "name": "Success",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1050, 300],
      "id": "success-node-gads"
    }
  ],
  "connections": {
    "Schedule Trigger - Diário 9:15h": {
      "main": [
        [
          {
            "node": "Google Ads - Buscar Campanhas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Ads - Buscar Campanhas": {
      "main": [
        [
          {
            "node": "Process Google Ads Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Google Ads Data": {
      "main": [
        [
          {
            "node": "Supabase - Insert Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Insert Metrics": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "tags": [
    {
      "name": "marketing",
      "id": "marketing-tag"
    },
    {
      "name": "google-ads",
      "id": "gads-tag"
    }
  ]
}

