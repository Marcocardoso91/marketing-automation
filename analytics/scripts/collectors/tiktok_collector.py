#!/usr/bin/env python3
"""
TikTok Metrics Collector
Coleta m√©tricas do TikTok via Marketing API ou Display API
"""

import os
import requests
from datetime import datetime, timedelta
from typing import Optional, Dict, Any


class TikTokCollector:
    """Coletor de m√©tricas do TikTok"""

    def __init__(self):
        # TikTok Marketing API (para quem usa TikTok Ads)
        self.access_token = os.getenv("TIKTOK_ACCESS_TOKEN")
        self.advertiser_id = os.getenv("TIKTOK_ADVERTISER_ID")

        # TikTok Display API (para m√©tricas org√¢nicas)
        self.client_key = os.getenv("TIKTOK_CLIENT_KEY")
        self.client_secret = os.getenv("TIKTOK_CLIENT_SECRET")
        self.username = os.getenv("TIKTOK_USERNAME")

        self.base_url = "https://business-api.tiktok.com/open_api/v1.3"
        self.display_url = "https://open.tiktokapis.com/v2"

    def get_ad_metrics(self, date_from: str, date_until: str) -> Optional[Dict[str, Any]]:
        """
        Buscar m√©tricas de TikTok Ads (Marketing API)
        Requer conta de an√∫ncios ativa
        """
        if not self.access_token or not self.advertiser_id:
            print("‚ö†Ô∏è  TikTok Ads: Credenciais n√£o configuradas")
            return None

        print("üîÑ Buscando m√©tricas TikTok Ads...")

        url = f"{self.base_url}/reports/integrated/get/"
        headers = {
            "Access-Token": self.access_token,
            "Content-Type": "application/json"
        }

        payload = {
            "advertiser_id": self.advertiser_id,
            "report_type": "BASIC",
            "data_level": "AUCTION_ADVERTISER",
            "dimensions": ["advertiser_id"],
            "metrics": [
                "spend",
                "impressions",
                "clicks",
                "reach",
                "ctr",
                "cpc",
                "cost_per_1000_reached"
            ],
            "start_date": date_from,
            "end_date": date_until,
            "page_size": 1000
        }

        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)

            if response.status_code == 200:
                data = response.json()

                if data.get("code") == 0 and data.get("data"):
                    metrics = data["data"]["list"][0] if data["data"].get("list") else {}

                    result = {
                        "spend": float(metrics.get("spend", 0)),
                        "impressions": int(metrics.get("impressions", 0)),
                        "clicks": int(metrics.get("clicks", 0)),
                        "reach": int(metrics.get("reach", 0)),
                        "ctr": float(metrics.get("ctr", 0)),
                        "cpc": float(metrics.get("cpc", 0)),
                        "cpm": float(metrics.get("cost_per_1000_reached", 0)),
                        "raw_data": metrics
                    }

                    print(f"‚úÖ TikTok Ads: {result['impressions']} impress√µes, R$ {result['spend']:.2f} gastos")
                    return result
                else:
                    print(f"‚ùå TikTok Ads Error: {data.get('message', 'Unknown error')}")
                    return None
            else:
                print(f"‚ùå TikTok Ads HTTP Error: {response.status_code}")
                return None

        except Exception as e:
            print(f"‚ùå TikTok Ads Exception: {str(e)}")
            return None

    def get_organic_metrics(self) -> Optional[Dict[str, Any]]:
        """
        Buscar m√©tricas org√¢nicas do TikTok (Display API)
        Requer aprova√ß√£o da Display API
        """
        if not self.client_key or not self.client_secret:
            print("‚ö†Ô∏è  TikTok Org√¢nico: Display API n√£o configurada")
            return None

        print("üîÑ Buscando m√©tricas org√¢nicas TikTok...")

        # Nota: Display API requer OAuth 2.0 flow complexo
        # Para simplificar, retornar None e recomendar n8n
        print("üí° Recomenda√ß√£o: Use n8n workflow para TikTok org√¢nico")
        print("   A Display API requer OAuth 2.0 que √© complexo de implementar")
        return None

    def process_metrics(self, ad_metrics: Optional[Dict], organic_metrics: Optional[Dict]) -> Optional[Dict[str, Any]]:
        """Processar e consolidar m√©tricas do TikTok"""
        if not ad_metrics and not organic_metrics:
            return None

        yesterday = datetime.now() - timedelta(days=1)

        # Consolidar m√©tricas (priorizar ads, fallback para org√¢nico)
        metrics = ad_metrics or organic_metrics or {}

        return {
            "data": yesterday.strftime("%Y-%m-%d"),
            "source": "tiktok",
            "spend": round(metrics.get("spend", 0), 2),
            "reach": metrics.get("reach", 0),
            "impressions": metrics.get("impressions", 0),
            "clicks": metrics.get("clicks", 0),
            "ctr": round(metrics.get("ctr", 0), 2),
            "cpc": round(metrics.get("cpc", 0), 4),
            "cpm": round(metrics.get("cpm", 0), 2),
            "conversions": 0,  # TikTok n√£o retorna diretamente
            "new_followers": 0,  # Precisa de endpoint separado
            "notes": f"TikTok: {metrics.get('impressions', 0)} impress√µes",
            "raw_data": metrics
        }


def get_tiktok_metrics(date_from: str = None, date_until: str = None) -> Optional[Dict[str, Any]]:
    """
    Fun√ß√£o helper para buscar m√©tricas do TikTok

    Args:
        date_from: Data inicial (YYYY-MM-DD), default: ontem
        date_until: Data final (YYYY-MM-DD), default: ontem

    Returns:
        Dicion√°rio com m√©tricas processadas ou None
    """
    if not date_from:
        yesterday = datetime.now() - timedelta(days=1)
        date_from = yesterday.strftime("%Y-%m-%d")
        date_until = date_from

    collector = TikTokCollector()

    # Tentar TikTok Ads primeiro
    ad_metrics = collector.get_ad_metrics(date_from, date_until)

    # Se n√£o tiver ads, tentar org√¢nico
    organic_metrics = None
    if not ad_metrics:
        organic_metrics = collector.get_organic_metrics()

    return collector.process_metrics(ad_metrics, organic_metrics)
