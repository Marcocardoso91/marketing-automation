stages:
  - lint
  - test
  - security
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  POSTGRES_DB: facebook_ads_ai_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

# Cache pip packages
cache:
  paths:
    - .cache/pip

# Lint stage
lint:code:
  stage: lint
  image: python:$PYTHON_VERSION
  script:
    - pip install black isort flake8 mypy
    - black --check src tests
    - isort --check-only src tests
    - flake8 src tests --max-line-length=100
    - mypy src --ignore-missing-imports
  only:
    - merge_requests
    - main
    - develop

# Test stage
test:unit:
  stage: test
  image: python:$PYTHON_VERSION
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/facebook_ads_ai_test
    REDIS_URL: redis://redis:6379/0
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
  script:
    - pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
  only:
    - merge_requests
    - main
    - develop

test:integration:
  stage: test
  image: python:$PYTHON_VERSION
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/facebook_ads_ai_test
    REDIS_URL: redis://redis:6379/0
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-asyncio httpx
  script:
    - pytest tests/integration -v
  only:
    - merge_requests
    - main
    - develop

# Security stage
security:scan:
  stage: security
  image: python:$PYTHON_VERSION
  script:
    - pip install bandit safety
    - bandit -r src -f json -o bandit-report.json
    - safety check --json > safety-report.json
  artifacts:
    paths:
      - bandit-report.json
      - safety-report.json
  allow_failure: true
  only:
    - merge_requests
    - main

# Build stage
build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy stage
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
        cd /opt/facebook-ads-ai-agent &&
        docker-compose pull &&
        docker-compose up -d &&
        docker-compose exec -T app alembic upgrade head
      "
  only:
    - main
  when: manual
